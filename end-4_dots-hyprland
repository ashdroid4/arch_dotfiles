"""
This script mostly follows the steps followed in https://github.com/end-4/dots-hyprland to install.
The big difference is this is written in python and I have used Chaotic-AUR repo to install dependecies."""

#---------------------------------IMPORTS-------------------------------------#
from __init__ import echo, foo, run, yon, chaoticAUR, checkUser
#-----------------------------------------------------------------------------#

#-------------------------------CONSTANTS----------------------------------#
pacman_dependencies = { # P.S: You can edit these dependencies according to your wish, but everything might not work.

"basic": " coreutils cliphist cmake curl fuzzel rsync wget ripgrep gojq npm meson typescript gjs pkg-config dart-sass axel make",

"microtex": " tinyxml2 gtkmm3 gtksourceviewmm cairomm gcc",

"python": " python-build python-pillow python-pywal python-setuptools-scm python-wheel",

"graphics": " hyprland-git xorg-xrandr xdg-desktop-portal xdg-desktop-portal-gtk xdg-desktop-portal-hyprland-git",

"player": " pavucontrol wireplumber libdbusmenu-gtk3 playerctl swww",

"gtk": " webp-pixbuf-loader gtk-layer-shell gtk3 gtksourceview3 gobject-introspection upower yad ydotool aylurs-gtk-shell",

"gnome": " polkit-gnome gnome-keyring gnome-control-center blueberry networkmanager brightnessctl wlsunset gnome-bluetooth-3.0",

"widgets": " python-pywayland python-psutil hypridle-git hyprlock-git wlogout wl-clipboard hyprpicker-git anyrun-git plasma-browser-integration",

"font": " adw-gtk3-git qt5ct qt5-wayland gradience-git fontconfig ttf-readex-pro ttf-jetbrains-mono-nerd bibata-cursor-theme " 
"ttf-material-symbols-variable-git ttf-space-mono-nerd fish foot starship python-materialyoucolor-git",

"recorder": " swappy wf-recorder grim tesseract tesseract-data-eng slurp"

}

home, username = checkUser()

""" Paths """

agsUOPath = home.joinpath('.config', 'ags', 'user_options.js')
downloadPath = home.joinpath('Downloads', 'end-4_dots-hyprland')
fishyPath = home.joinpath('.config', 'fish')
hyprlandConfPath = home.joinpath('.config', 'hypr', 'hyprland.conf')
hyprlandCustomPath = home.joinpath('.config', 'hypr', 'custom')

""" """

defaultAsk = list()

fonts = dict()

green = "\033[0;32m"; red = "\033[31;49;1m"; blue = "\033[0;36m"; magenta = "\033[0;35m"; nocolor = "\\e[m"
#--------------------------------------------------------------------------#

#-------------------------------Functions-------------------------------------#
def askInstall(module):

    echo(f"\n{green}I want to install {module}. If you have {module} installed you should skip now.{nocolor}\n")

    ask = yon(
        "\nDo you want to...\nInstall(i)\nInstall For All(iall)\nSkip(s)\nSkip For All(sall)\nMake the wise choice: ",
        simple=False
        )
    
    if type(ask) == bool: return ask
    elif ask == "iall":
        defaultAsk.append(True)
        return True
    elif ask == "sall":
        defaultAsk.append(False)
        return False

#-----------------------------------------------------------------------------#

#-----------------------------Script Start---------------------------#

Welcome = f"""
This script will help you download and setup your Hyprland Window Manager.
The script will continue in the following steps:
{green}
1. It will add a repo Chaotic-AUR if needed.
2. It will install all the dependencies.
3. It will try to install fonts Rubik, Gabarito, One-UI, Bibata, MicroTex one by one.
4. It will write the needed config for Hyprland.{nocolor}"""

echo(Welcome)

# Let's add a repo Chaotic-AUR.

chaoticAUR()

# Let's move on to installing dependencies.

dependencies = [pacman_dependencies[value] for value in pacman_dependencies]
dependencies = "".join(deps for deps in dependencies)

echo(f"\n\n{blue}Installing Dependencies...")
echo(f"(you can edit the dependencies as you want in the {downloadPath}/end-4_dots-hyprland){nocolor}\n")


run(f"pacman -S --needed {dependencies}")

echo(f"{green}\nThe depenedencies have been installed!{nocolor}\n")

# Let's add user to video and input groups.

temp = "you could try `sudo usermod -aG video, input 'YourUsernameHere'`"
run(f'usermod -aG video,input {username}', possible_warning=temp); del temp

# Let's install fonts.

echo(f"\n\n{blue}We will try to install some fonts now.{nocolor}\n\n") # P.S: I have ignored end-4 and installed AGS via pacman

"""Rubik"""

script = f"""
mkdir -p {home}/cache/Rubik
cd {home}/cache/Rubik
git init -b main
git remote add origin https://github.com/googlefonts/rubik.git
git pull origin main && git submodule update --init --recursive
mkdir -p /usr/local/share/fonts/TTF/
cp fonts/variable/Rubik*.ttf /usr/local/share/fonts/TTF/
mkdir -p /usr/local/share/licenses/ttf-rubik/
cp OFL.txt /usr/local/share/licenses/ttf-rubik/LICENSE
fc-cache -fv
gsettings set org.gnome.desktop.interface font-name 'Rubik 11'
cd {home}"""

fonts.update({"Rubik": script})

"""Gabarito"""

script = f"""
mkdir -p {home}/cache/Gabarito
cd {home}/cache/Gabarito
git init -b main
git remote add origin https://github.com/naipefoundry/gabarito.git
git pull origin main && git submodule update --init --recursive
mkdir -p /usr/local/share/fonts/TTF/
cp fonts/ttf/Gabarito*.ttf /usr/local/share/fonts/TTF/
mkdir -p /usr/local/share/licenses/ttf-gabarito/
cp OFL.txt /usr/local/share/licenses/ttf-gabarito/LICENSE
fc-cache -fv
cd {home}"""

fonts.update({"Gabarito": script})

"""One-UI"""

script = f"""
mkdir -p {home}/cache/OneUI4-Icons
cd {home}/cache/OneUI4-Icons
git init -b main
git remote add origin https://github.com/end-4/OneUI4-Icons.git
git pull origin main && git submodule update --init --recursive
mkdir -p /usr/local/share/icons
cp -r OneUI /usr/local/share/icons
cp -r OneUI-dark /usr/local/share/icons
cp -r OneUI-light /usr/local/share/icons
cd {home}"""

fonts.update({"One-UI": script})

"""Bibata"""

script = f"""
mkdir -p {home}/cache/bibata-cursor
cd {home}/cache/bibata-cursor
name="Bibata-Modern-Classic"
file="$name.tar.xz"
axel https://github.com/ful1e5/Bibata_Cursor/releases/latest/download/$file
tar -xf $file
mkdir -p /usr/local/share/icons
cp -r $name /usr/local/share/icons
cd {home}"""

fonts.update({"Bibata": script})

"""MicroTex"""

script = f"""
mkdir -p {home}/cache/MicroTeX
cd {home}/cache/MicroTeX
git init -b master
git remote add origin https://github.com/NanoMichael/MicroTeX.git
git pull origin master && git submodule update --init --recursive
mkdir -p build
cd build
cmake ..
make -j32
mkdir -p /usr/local/bin
cp ./LaTeX /usr/local/bin/
cd {home}"""

fonts.update({"MicroTex": script})

for font in fonts:
    script = fonts[font]

    if not defaultAsk: ask = askInstall(font)
    else: ask = defaultAsk[0]

    if ask: run(script)

echo(f"\n{green}The process of installing fonts is hereby complete.{nocolor}\n")


# Let's copy the configs.

echo(f"\n{magenta}I will try to import all the configs now. "+
     f"This is very important so make sure to answer some question if required.{nocolor}\n")
    

## In case some folders does not exists
directories = [
    f"{home}/.config",
    f"{home}/.cache",
    f"{home}/.local/bin",
    f"{home}/.local/share"
]
for directory in directories:
    run(f"mkdir -p {directory}")

excludedPaths = ['hypr', 'ags', 'fish']

run(f"rsync -av --exclude '/custom' --exclude '/hyprland.conf' {downloadPath}/.config/hypr/ {home}/.config/hypr/")

if hyprlandConfPath.exists():
    echo(f"\n{red}Hey, {hyprlandConfPath} file already exists. Do you want to replace it?\n" +
         f"(If you installed Hyprland for the first time, then I recommend 'Yes'{nocolor}\n"
    )
    skip = yon("Yes or No?: ")

    if skip: 
        run(f"cp -f {downloadPath}/.config/hypr/hyprland.conf {hyprlandConfPath}")
    else:
        run(f"cp {downloadPath}/.config/hypr/hyprland.conf {hyprlandConfPath}.new")
else:
    run(f"cp {downloadPath}/.config/hypr/hyprland.conf {hyprlandConfPath.parent}/")

if hyprlandCustomPath.exists():
    echo(f"\n{red}Hey, {hyprlandCustomPath} folder already exists. Do you want to replace it?\n{nocolor}" )
    skip = yon("Yes or No?: ")

    if skip:
        run(f"rsync -av --delete {downloadPath}/.config/hypr/custom/ {hyprlandCustomPath}/")
else:
    run(f"rsync -av {downloadPath}/.config/hypr/custom/ {hyprlandCustomPath}/")

if agsUOPath.exists():
    echo(f"\n{red}Hey, {agsUOPath} file already exists. Do you want to replace it?\n{nocolor}" )
    skip = yon("Yes or No?: ")

    if skip:
        run(f"rsync -av --delete {downloadPath}/.config/ags/ {home}/.config/ags/")
else:
    run(f"rsync -av {downloadPath}/.config/ags/ {home}/.config/ags/")

if fishyPath.exists():
    echo(f"\n{red}Hey, something's fishy! Just Kidding. {fishyPath} folder already exists. Do you want to replace it?\n{nocolor}")
    skip = yon("Yes or No?: ")
    
    if skip:
        run(f"rsync -av --delete {downloadPath}/.config/fish/ {fishyPath}/")
else:
    run(f"rsync -av {downloadPath}/.config/fish/ {fishyPath}/")


for path in (downloadPath.joinpath('.config')).iterdir():
    if path not in excludedPaths:
        if path.is_dir(): 
            run(f"rsync -av {path}/ {home}/.config/{path.name}/") # --delete ??
        if path.is_file(): 
            run(f"rsync -av {path} {home}/.config/")


## Some foldes (eg. .local/bin) should be processed separately to avoid `--delete' for rsync,
## since the files here come from different places, not only about one program.
run(f"rsync -av {downloadPath}/.local/bin/ {home}/.local/bin/")

## Something with zsh that I don't want to complicate.
#run("grep -q 'source ~/.config/zshrc.d/dots-hyprland.zsh' ~/.zshrc")

# Changing to Dark Mode.
run("gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'")

## Optional stuff.

# Install brave...
with open(f"{home}/cache/brave"): 
    brave = brave.read()
    if "NO" in brave: brave = False

try: 
    foo("pacman -Qi {}".format(package_name), check=True, shell=True, capture_output=True)
    brave = False
except: 
    brave = True

if brave:
    brave = yon("\n\nDo you want to install brave?\nYes or No: ")
    if brave:
        run("pacman -S brave")
        with open(f"{home}/.config/hypr/custom/keybinds.conf", "r+") as keybind:
            keybind = keybind.read()
            if not "brave" on keybind:
                keybind += "bind = Super+Shift, W, exec, brave"
        print("\nDone! Brave is installed. The key for brave is Super + Shift + W\n")
    else:
        with open(f"{home}/cache/brave", "w") as brave: brave.write("NO")
        

# Farewell Message
post_installation = "https://end-4.github.io/dots-hyprland-wiki/en/i-i/01setup/#post-installation"

farewell = f"""
{green}Hyprland Installed!
{magenta}See the '{downloadPath}/Import Manually' folder and grab anything you need.
{blue}If you are new to Hyprland, please read {post_installation} for hints on using Hyprland.

{magenta}If you are already running Hyprland,
Press {green}Ctrl + /{magenta} for a list of keybinds.{nocolor}"""

echo(farewell)

#-----------------------------Script End-----------------------------#
